//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.StreamServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="StreamExperiment", ConfigurationName="StreamServiceReference.IStreamService")]
    public interface IStreamService {
        
        [System.ServiceModel.OperationContractAttribute(Action="StreamExperiment/IStreamService/GetFilesInfo", ReplyAction="StreamExperiment/IStreamService/GetFilesInfoResponse")]
        string[] GetFilesInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="StreamExperiment/IStreamService/GetFilesInfo", ReplyAction="StreamExperiment/IStreamService/GetFilesInfoResponse")]
        System.Threading.Tasks.Task<string[]> GetFilesInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="StreamExperiment/IStreamService/DownloadStream", ReplyAction="StreamExperiment/IStreamService/DownloadStreamResponse")]
        System.IO.Stream DownloadStream(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="StreamExperiment/IStreamService/DownloadStream", ReplyAction="StreamExperiment/IStreamService/DownloadStreamResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadStreamAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="StreamExperiment/IStreamService/UploadStream", ReplyAction="StreamExperiment/IStreamService/UploadStreamResponse")]
        bool UploadStream(System.IO.Stream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="StreamExperiment/IStreamService/UploadStream", ReplyAction="StreamExperiment/IStreamService/UploadStreamResponse")]
        System.Threading.Tasks.Task<bool> UploadStreamAsync(System.IO.Stream stream);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStreamServiceChannel : Client.StreamServiceReference.IStreamService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StreamServiceClient : System.ServiceModel.ClientBase<Client.StreamServiceReference.IStreamService>, Client.StreamServiceReference.IStreamService {
        
        public StreamServiceClient() {
        }
        
        public StreamServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StreamServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StreamServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StreamServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetFilesInfo() {
            return base.Channel.GetFilesInfo();
        }
        
        public System.Threading.Tasks.Task<string[]> GetFilesInfoAsync() {
            return base.Channel.GetFilesInfoAsync();
        }
        
        public System.IO.Stream DownloadStream(string fileName) {
            return base.Channel.DownloadStream(fileName);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadStreamAsync(string fileName) {
            return base.Channel.DownloadStreamAsync(fileName);
        }
        
        public bool UploadStream(System.IO.Stream stream) {
            return base.Channel.UploadStream(stream);
        }
        
        public System.Threading.Tasks.Task<bool> UploadStreamAsync(System.IO.Stream stream) {
            return base.Channel.UploadStreamAsync(stream);
        }
    }
}
