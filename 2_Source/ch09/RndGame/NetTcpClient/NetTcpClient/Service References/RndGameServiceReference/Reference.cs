//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetTcpClient.RndGameServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="RandomGameExample", ConfigurationName="RndGameServiceReference.IRndGameService", CallbackContract=typeof(NetTcpClient.RndGameServiceReference.IRndGameServiceCallback))]
    public interface IRndGameService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/Login")]
        void Login(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/Login")]
        System.Threading.Tasks.Task LoginAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/Logout")]
        void Logout(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/Logout")]
        System.Threading.Tasks.Task LogoutAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/SitDown")]
        void SitDown(string userName, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/SitDown")]
        System.Threading.Tasks.Task SitDownAsync(string userName, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/GetUp")]
        void GetUp(int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/GetUp")]
        System.Threading.Tasks.Task GetUpAsync(int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/Start")]
        void Start(string userName, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/Start")]
        System.Threading.Tasks.Task StartAsync(string userName, int index, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/SetLevel")]
        void SetLevel(int index, int level);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/SetLevel")]
        System.Threading.Tasks.Task SetLevelAsync(int index, int level);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/UnsetDot")]
        void UnsetDot(int index, int row, int col);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/UnsetDot")]
        System.Threading.Tasks.Task UnsetDotAsync(int index, int row, int col);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/Talk")]
        void Talk(int index, string userName, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/Talk")]
        System.Threading.Tasks.Task TalkAsync(int index, string userName, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRndGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/ShowLogin")]
        void ShowLogin(string loginUserName, int maxTables);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/ShowLogout")]
        void ShowLogout(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/ShowSitDown")]
        void ShowSitDown(string userName, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/ShowGetUp")]
        void ShowGetUp(string userName, int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/ShowStart")]
        void ShowStart(int side);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/ShowTalk")]
        void ShowTalk(string userName, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/GameStart")]
        void GameStart();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/ShowWin")]
        void ShowWin(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/UpdateTablesInfo")]
        void UpdateTablesInfo(string tablesInfo, int userCount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/UpdateLevel")]
        void UpdateLevel(int lavel);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/GridSetDot")]
        void GridSetDot(int row, int col, int color);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="RandomGameExample/IRndGameService/GridUnsetDot")]
        void GridUnsetDot(int row, int col);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRndGameServiceChannel : NetTcpClient.RndGameServiceReference.IRndGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RndGameServiceClient : System.ServiceModel.DuplexClientBase<NetTcpClient.RndGameServiceReference.IRndGameService>, NetTcpClient.RndGameServiceReference.IRndGameService {
        
        public RndGameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RndGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RndGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RndGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RndGameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login(string userName) {
            base.Channel.Login(userName);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string userName) {
            return base.Channel.LoginAsync(userName);
        }
        
        public void Logout(string userName) {
            base.Channel.Logout(userName);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string userName) {
            return base.Channel.LogoutAsync(userName);
        }
        
        public void SitDown(string userName, int index, int side) {
            base.Channel.SitDown(userName, index, side);
        }
        
        public System.Threading.Tasks.Task SitDownAsync(string userName, int index, int side) {
            return base.Channel.SitDownAsync(userName, index, side);
        }
        
        public void GetUp(int index, int side) {
            base.Channel.GetUp(index, side);
        }
        
        public System.Threading.Tasks.Task GetUpAsync(int index, int side) {
            return base.Channel.GetUpAsync(index, side);
        }
        
        public void Start(string userName, int index, int side) {
            base.Channel.Start(userName, index, side);
        }
        
        public System.Threading.Tasks.Task StartAsync(string userName, int index, int side) {
            return base.Channel.StartAsync(userName, index, side);
        }
        
        public void SetLevel(int index, int level) {
            base.Channel.SetLevel(index, level);
        }
        
        public System.Threading.Tasks.Task SetLevelAsync(int index, int level) {
            return base.Channel.SetLevelAsync(index, level);
        }
        
        public void UnsetDot(int index, int row, int col) {
            base.Channel.UnsetDot(index, row, col);
        }
        
        public System.Threading.Tasks.Task UnsetDotAsync(int index, int row, int col) {
            return base.Channel.UnsetDotAsync(index, row, col);
        }
        
        public void Talk(int index, string userName, string message) {
            base.Channel.Talk(index, userName, message);
        }
        
        public System.Threading.Tasks.Task TalkAsync(int index, string userName, string message) {
            return base.Channel.TalkAsync(index, userName, message);
        }
    }
}
